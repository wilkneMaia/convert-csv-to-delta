[tool.poetry]
name = "parquet-query"
version = "0.1.0"
description = ""
authors = ["Wilkne Maia <72803395+wilkneMaia@users.noreply.github.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pandas = "^2.2.3"
python-dotenv = "^1.1.0"
pyspark = "^3.5.5"
streamlit = "^1.44.1"
prettycolorprinter = "^0.45"
tabulate = "^0.9.0"
delta-spark = "^3.3.1"


[tool.poetry.group.dev.dependencies]
# Testes
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.0"

# Linting e Formatação
black = "^25.1.0"
flake8 = "^7.2.0"
pylint = "^3.3.6"
isort = "^6.0.1"
mypy = "^1.15.0"
ruff = "^0.11.7"

# Integração Contínua e Tarefas
tox = "^4.25.0"
coverage = "^7.8.0"
pre-commit = "^4.2.0"
taskipy = "^1.14.1"

# Documentação
sphinx = "^8.2.3"
sphinx-autodoc-typehints = "^3.1.0"
myst-parser = "^4.0.1"
ipykernel = "^6.29.5"
matplotlib = "^3.10.3"

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [".venv", "migrations", "__pycache__", "tests"]

# Configurações de linting
[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "I",   # isort
    "UP",  # pyupgrade
    "PL",  # pylint
    "PT",  # pytest-style
    "PTH", # pathlib
    "RUF", # ruff-specific
]
ignore = [
    "PTH118",
    "RUF013",
    "PLR0913",
    "PLR2004",
    "PLR0917",
    "PTH123",
    "PTH100",
    "PLR6301",
    "PTH120",
    "E501",
    "PLC0415",
    "E722",
    "F841",
]
preview = true # Ativa recursos em preview

[tool.ruff.format]
preview = true
quote-style = "single"
docstring-code-format = true

[tool.black]
line-length = 88
target-version = ["py311"]
preview = true

[tool.isort]
profile = "black"
known_first_party = ["plant_overview"]
line_length = 88
force_sort_within_sections = true

[tool.mypy]
python_version = "3.11"
strict = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
pythonpath = "."
addopts = "-p no:warnings --cov=src --cov-report term-missing"
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.taskipy.tasks]
# --- Linting e Formatação ---
lint = "ruff check . && black --check . && isort --check ."

# --- Análise de Código ---
format-check = """
    ruff check . &&
    black --check . &&
    isort --check . &&
    mypy --strict --show-error-codes src
"""

# Esta task irá reformatar automaticamente o código Python,
# quebrando linhas longas e ajustando a tabulação conforme o padrão Black.
format-fix = """
    # 1. Remove imports não utilizados
    autoflake --remove-all-unused-imports --remove-unused-variables --recursive --in-place src

    # 2. Organiza imports
    isort .

    # 3. Formatação padrão (quebra linhas longas e ajusta tabulação)
    black .

    # 4. Correções automáticas do Ruff (com fallback)
    ruff check --fix --exit-zero . || echo "Ruff fix completed with warnings"
"""

audit = "safety check && bandit -r src"

# --- Testes ---
test = "pytest -x --cov=src --cov-report=term-missing"
test-ci = "pytest -x --cov=src --cov-report=xml"
test-watch = "ptw -- -x --cov=src"

# --- Utilitários ---
clean = """
    find . -type f -name '*.pyc' -delete &&
    find . -type d -name '__pycache__' -exec rm -rf {} + &&
    rm -rf .coverage .mypy_cache .pytest_cache .ruff_cache .tox .venv
"""
docs = "pdoc src -o docs --force"
install = "poetry install && pre-commit install"
update = "poetry update && pre-commit autoupdate"


[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
